version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "------------------- Destroying environment ---------------------" 
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS = $(curl https://kvdb.io/DdCZGLoLpdYqbYCfPDfFLu/SUCCESS)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Back-end test
          command: |
             cd frontend
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [fronend-build]
      - run:
          name: Front-end vulnerablity 
          command: |
             cd frontend
            #  npm audit fix --audit-level=critical --force
            #  npm audit --audit-level=critical
            # the fix breaks the build
            #  npm audit --audit-level=critical
            
            


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end vulnerablity
          command: |
             cd backend
            #  npm audit fix --audit-level=critical --force
            #  npm audit --audit-level=critical
            # the fix breaks the build
            #  npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > ~/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment    

  configure-infrastructure:
    docker:
      - image: 18120211/aws-ansible-22.04
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Check inventory
          command: cat ~/inventory.txt
      - add_ssh_keys:
          fingerprints:
            - "fd:40:06:65:39:7d:da:93:15:48:5c:c0:76:1b:c6:8e"
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/inventory.txt .circleci/ansible/configure-server.yml
     
      # Here's where you will add some code to rollback on failure 
      - destroy-environment        

  run-migrations:
    docker:
      - image: 18120211/node-aws-ansible-22.04
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
              cd backend
              npm i
              # Run and save the migration output
              npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                curl -d '1' https://kvdb.io/DdCZGLoLpdYqbYCfPDfFLu/SUCCESS 
            else
                curl -d '0' https://kvdb.io/DdCZGLoLpdYqbYCfPDfFLu/SUCCESS           
            fi

     # Here's where you will add some code to rollback on failure   
      - destroy-environment  

  deploy-frontend:
    docker:
      - image: 18120211/node-aws-ansible-22.04
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      
      - run:
          name: Get backend url
          command: |            
            export BACKEND_IP=$(aws ec2 describe-instances \
             --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            echo "-------------------Back end URL---------------------"
            cat frontend/.env
            echo "-------------------Front end URL--------------------"
            echo "https://udapeople-${CIRCLE_WORKFLOW_ID}.s3.amazonaws.com/index.html"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure   
      - destroy-environment     
                    
  deploy-backend:
    docker:
      - image: 18120211/node-aws-ansible-22.04
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      
      - add_ssh_keys:
          fingerprints:
            - "fd:40:06:65:39:7d:da:93:15:48:5c:c0:76:1b:c6:8e"
      - attach_workspace:
          at: ~/
     
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf backend.tar.gz .
            echo "Contents  of the inventory.txt file is -------"
            cat ~/inventory.txt
            ansible-playbook -i ~/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment     


  smoke-test:
    docker:
      - image: 18120211/aws-ansible-22.04 
    steps:
      - checkout
            
      # - run:
      #     name: Backend smoke test.
      #     command: |
      #       export BACKEND_IP=$(aws ec2 describe-instances \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
      #       export API_URL="http://${BACKEND_IP}:3030/api/status"
      #       echo $API_URL
      #       if curl $API_URL | grep "ok"
      #       then
      #           exit 0
      #       else
      #           exit 1
      #       fi


      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations  

  cloudfront-update:
    docker:
      - image: 18120211/aws-ansible-22.04
    steps:
      - checkout
      
      - run:
          name: Update cloudfront distribution
          command: |
            echo "--------------------- Get OLD workflow id ----------------------"
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text > ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths: 
            - OldWorkflowID.txt
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]